<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="rrx.cnuo.service.dao.TradeAbnormalMapper">
  <resultMap id="BaseResultMap" type="rrx.cnuo.service.po.TradeAbnormal">
    <id column="trade_id" jdbcType="BIGINT" property="tradeId" />
    <result column="trade_type" jdbcType="TINYINT" property="tradeType" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="recon_date" jdbcType="DATE" property="reconDate" />
    <result column="result" jdbcType="BIT" property="result" />
    <result column="amount" jdbcType="INTEGER" property="amount" />
    <result column="abnormal_type" jdbcType="TINYINT" property="abnormalType" />
    <result column="send_msg_status" jdbcType="BIT" property="sendMsgStatus" />
  </resultMap>
  <sql id="Base_Column_List">
    trade_id, trade_type, type, recon_date, result, amount, abnormal_type, send_msg_status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from trade_abnormal
    where trade_id = #{tradeId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from trade_abnormal
    where trade_id = #{tradeId,jdbcType=BIGINT}
  </delete>
  
  <insert id="insertSelective" parameterType="rrx.cnuo.service.po.TradeAbnormal">
    insert into trade_abnormal
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tradeId != null">
        trade_id,
      </if>
      <if test="tradeType != null">
        trade_type,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="reconDate != null">
        recon_date,
      </if>
      <if test="result != null">
        result,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="abnormalType != null">
        abnormal_type,
      </if>
      <if test="sendMsgStatus != null">
        send_msg_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tradeId != null">
        #{tradeId,jdbcType=BIGINT},
      </if>
      <if test="tradeType != null">
        #{tradeType,jdbcType=TINYINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="reconDate != null">
        #{reconDate,jdbcType=DATE},
      </if>
      <if test="result != null">
        #{result,jdbcType=BIT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="abnormalType != null">
        #{abnormalType,jdbcType=TINYINT},
      </if>
      <if test="sendMsgStatus != null">
        #{sendMsgStatus,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="rrx.cnuo.service.po.TradeAbnormal">
    update trade_abnormal
    <set>
      <if test="tradeType != null">
        trade_type = #{tradeType,jdbcType=TINYINT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="reconDate != null">
        recon_date = #{reconDate,jdbcType=DATE},
      </if>
      <if test="result != null">
        result = #{result,jdbcType=BIT},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="abnormalType != null">
        abnormal_type = #{abnormalType,jdbcType=TINYINT},
      </if>
      <if test="sendMsgStatus != null">
        send_msg_status = #{sendMsgStatus,jdbcType=BIT},
      </if>
    </set>
    where trade_id = #{tradeId,jdbcType=BIGINT}
  </update>
  
  <insert id="insertTradeAbnormalBatch" parameterType="java.util.List">
    insert into trade_abnormal (
    	trade_id, 
    	trade_type, 
    	type, 
    	date, 
        result, 
        amount,
        abnormal_type)
    values 
    <foreach collection="list" item="record" index="index" separator=",">
    	(
        #{record.id,jdbcType=BIGINT},
        #{record.tradeType,jdbcType=TINYINT},
        #{record.type,jdbcType=TINYINT},
        FROM_UNIXTIME(#{record.reconDate,jdbcType=DATE}),
        #{record.result,jdbcType=BIT},
        #{record.amount,jdbcType=INTEGER},
        #{record.abnormalType,jdbcType=TINYINT}
        )
    </foreach>
  </insert>
  
  <select id="getTradeAbnormalList" parameterType="String" resultType="rrx.cnuo.service.vo.AbnormalTradeGroupVo">
  	select t.trade_type tradeType,
  			t.abnormal_type abnormalType,
  			count(t.abnormal_type) abTypeCount
	from trade_abnormal t 
	where t.date = #{curDate}
	and t.send_msg_status is false
	group by t.trade_type,t.abnormal_type
  </select>
  
  <update id="updateTradeAbnormalSendMsgStatus" parameterType="String">
  	update trade_abnormal t 
  	set t.send_msg_status = true
  	where t.date = #{curDate}
	and t.send_msg_status is false
  </update>
  
  <delete id="daleteTradeAbnormalBatch" parameterType="java.util.List">
  	delete from trade_abnormal
    where trade_id in
    <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
    	#{id}
    </foreach>
  </delete>
  
  <select id="getTradeAbnormalDates" resultType="java.util.Date">
  	select distinct(t.date)
	from trade_abnormal t 
	where t.date &lt; curdate()
  </select>
</mapper>